"""additional tables

Revision ID: b344ad618239
Revises: a0ed5d89cda7
Create Date: 2020-02-17 14:21:13.686947

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = 'b344ad618239'
down_revision = 'a0ed5d89cda7'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('GO',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('aspect', sa.Enum('f', 'p', 'c', name='aspectenum'), nullable=True),
    sa.Column('GO', sa.String(length=10), nullable=True),
    sa.Column('term', sa.Text(), nullable=True),
    sa.Column('date', sa.DateTime(), nullable=True),
    sa.Column('version', sa.String(length=10), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('expression_collection',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=45), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('expression_tissue',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=45), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('taxonomy',
    sa.Column('node_id', sa.Integer(), nullable=False),
    sa.Column('kingdom', sa.VARCHAR(length=1), nullable=True),
    sa.Column('name', sa.VARCHAR(length=100), nullable=True),
    sa.Column('strain', sa.VARCHAR(length=100), nullable=True),
    sa.Column('parent_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['parent_id'], ['taxonomy.node_id'], ),
    sa.PrimaryKeyConstraint('node_id')
    )
    op.create_index(op.f('ix_taxonomy_kingdom'), 'taxonomy', ['kingdom'], unique=False)
    op.create_table('GO_hierarchy',
    sa.Column('parent_id', sa.Integer(), nullable=True),
    sa.Column('child_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['child_id'], ['GO.id'], ),
    sa.ForeignKeyConstraint(['parent_id'], ['GO.id'], )
    )
    op.create_table('species',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.VARCHAR(length=100), nullable=True),
    sa.Column('taxon_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['taxon_id'], ['taxonomy.node_id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('expression',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('probeset_id', sa.String(length=45), nullable=True),
    sa.Column('genechip', sa.Enum('gnf1h', 'gnf1m', 'hg_u133a', name='genechipenum'), nullable=True),
    sa.Column('species_id', sa.Integer(), nullable=True),
    sa.Column('name', sa.Text(), nullable=True),
    sa.ForeignKeyConstraint(['species_id'], ['species.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_expression_probeset_id'), 'expression', ['probeset_id'], unique=True)
    op.create_table('protein',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('sequence', sa.Text(), nullable=True),
    sa.Column('acc_gene', sa.String(length=30), nullable=True),
    sa.Column('locus', sa.String(length=30), nullable=True),
    sa.Column('name', sa.String(length=100), nullable=True),
    sa.Column('date', sa.DateTime(), nullable=True),
    sa.Column('species_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['species_id'], ['species.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('expression_acc',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('type', sa.Enum('gene_symbol', 'refseq', 'uniprot', 'alias', name='expressiontypeenum'), nullable=True),
    sa.Column('value', sa.String(length=45), nullable=True),
    sa.Column('probeset_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['probeset_id'], ['expression.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('expression_samples',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('probeset_id', sa.Integer(), nullable=True),
    sa.Column('collection_id', sa.Integer(), nullable=True),
    sa.Column('tissue_id', sa.Integer(), nullable=True),
    sa.Column('value', sa.Float(), nullable=True),
    sa.ForeignKeyConstraint(['collection_id'], ['expression_collection.id'], ),
    sa.ForeignKeyConstraint(['probeset_id'], ['expression.id'], ),
    sa.ForeignKeyConstraint(['tissue_id'], ['expression_tissue.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('protein_GO',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('protein_id', sa.Integer(), nullable=True),
    sa.Column('GO_id', sa.Integer(), nullable=True),
    sa.Column('date', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['GO_id'], ['GO.id'], ),
    sa.ForeignKeyConstraint(['protein_id'], ['protein.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('protein_acc',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('type', sa.String(length=30), nullable=True),
    sa.Column('value', sa.String(length=45), nullable=True),
    sa.Column('protein_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['protein_id'], ['protein.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('protein_domain',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('label', sa.String(length=45), nullable=True),
    sa.Column('start', sa.Integer(), nullable=True),
    sa.Column('stop', sa.Integer(), nullable=True),
    sa.Column('p_value', sa.Float(), nullable=True),
    sa.Column('source', sa.Text(), nullable=True),
    sa.Column('params', sa.String(length=45), nullable=True),
    sa.Column('protein_id', sa.Integer(), nullable=True),
    sa.Column('version', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['protein_id'], ['protein.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('protein_expression',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('protein_id', sa.Integer(), nullable=True),
    sa.Column('probeset_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['probeset_id'], ['expression.probeset_id'], ),
    sa.ForeignKeyConstraint(['protein_id'], ['protein.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('protein_regions',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('type', sa.String(length=20), nullable=True),
    sa.Column('label', sa.String(length=100), nullable=True),
    sa.Column('source', sa.Enum('predicted', 'parsed', 'uniprot', 'ncbi', name='proteinsourceenum'), nullable=True),
    sa.Column('start', sa.Integer(), nullable=True),
    sa.Column('stop', sa.Integer(), nullable=True),
    sa.Column('protein_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['protein_id'], ['protein.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('protein_scansite',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('source', sa.String(length=40), nullable=True),
    sa.Column('value', sa.String(length=20), nullable=True),
    sa.Column('score', sa.Float(), nullable=True),
    sa.Column('percentile', sa.Float(), nullable=True),
    sa.Column('site_pos', sa.Integer(), nullable=True),
    sa.Column('protein_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['protein_id'], ['protein.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('protein_scansite')
    op.drop_table('protein_regions')
    op.drop_table('protein_expression')
    op.drop_table('protein_domain')
    op.drop_table('protein_acc')
    op.drop_table('protein_GO')
    op.drop_table('expression_samples')
    op.drop_table('expression_acc')
    op.drop_table('protein')
    op.drop_index(op.f('ix_expression_probeset_id'), table_name='expression')
    op.drop_table('expression')
    op.drop_table('species')
    op.drop_table('GO_hierarchy')
    op.drop_index(op.f('ix_taxonomy_kingdom'), table_name='taxonomy')
    op.drop_table('taxonomy')
    op.drop_table('expression_tissue')
    op.drop_table('expression_collection')
    op.drop_table('GO')
    # ### end Alembic commands ###
